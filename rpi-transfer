#!/usr/bin/env python

import os
import logging
import sys
import subprocess
import shutil


class Transfer:
    def __init__(self):
        self.noobs = False
        self.fstab = ''
        self.instructions = open('/etc/rpi_transfer/INSTRUCTIONS.txt', 'r').read()
        self.edit = open('/etc/rpi_transfer/EDIT-AND-DELETE.txt', 'r').read()
        try:
            os.remove('/var/log/rpi_transfer.log')
        except (SystemExit, KeyboardInterrupt):
            raise
        except Exception, e:
            pass

        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        handler = logging.FileHandler('/var/log/rpi_transfer.log', mode='w')
        handler.setLevel(logging.INFO)

        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)

        self.logger.addHandler(handler)

    def main(self):
        self.logger.info('Initiating startup check')
        self.start_check()
        self.logger.info('Checking and copying files')
        self.copy_files()
        self.logger.info('Checking and acting upon edit and delete files')
        self.edit_delete()
        self.logger.info("Looks like we're finished, let's exit, exiting...")
        self.clean_up()

    def edit_delete(self):
        if self.noobs is True:
            try:
                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'r+')
            except (SystemExit, KeyboardInterrupt):
                raise
            except Exception, e:
                self.logger.warn('No edit delete file, creating new...')

                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
                edit_file.write(self.edit)
                edit_file.close()

                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'r+')
            edit_file_contents = edit_file.readlines()
            for line in edit_file_contents:
                if not line.replace(' ', '')[0] == '#':
                    if line.replace(' ', '')[:3] == 'del':
                        try:
                            if os.path.isdir(line.replace(' ', '')[3:].replace('\n', '')):
                                shutil.rmtree(line.replace(' ', '')[3:].replace('\n', ''))
                            else:
                                os.remove(line.replace(' ', '')[3:].replace('\n', ''))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            self.logger.warn('No such file/folder to delete, ' + line.replace(' ', '')[3:])
                    elif line.replace(' ', '')[:4] == 'edit':
                        try:
                            if os.path.isdir(line.replace(' ', '')[4:].replace('\n','')):
                                shutil.copytree(line.replace(' ', '')[4:].replace('\n', ''), '/mnt/rpi-transfer')
                            else:
                                if not os.path.isdir('/mnt/rpi-transfer' + os.path.dirname(line.replace(' ', '')[4:].replace('\n', ''))):
                                    os.makedirs('/mnt/rpi-transfer' + os.path.dirname(line.replace(' ', '')[4:].replace('\n', '')))
                                shutil.copy(line.replace(' ', '')[4:].replace('\n', ''), '/mnt/rpi-transfer' + os.path.dirname(line.replace(' ', '')[4:].replace('\n', '')))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            self.logger.warn('No such file/folder to edit, ' + line.replace(' ', '')[4:])
            os.remove('/mnt/rpi-transfer/EDIT-AND-DELETE.txt')
            edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(self.edit)
            edit_file.close()
        else:
            try:
                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'r+')
            except (SystemExit, KeyboardInterrupt):
                raise
            except Exception, e:
                self.logger.warn('No edit delete file, creating new...')

                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
                edit_file.write(self.edit)
                edit_file.close()

                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'r+')
            edit_file_contents = edit_file.readlines()
            for line in edit_file_contents:
                if not line.replace(' ', '')[0] == '#':
                    if line.replace(' ', '')[:3] == 'del':
                        try:
                            if os.path.isdir(line.replace(' ', '')[3:].replace('\n', '')):
                                shutil.rmtree(line.replace(' ', '')[3:].replace('\n', ''))
                            else:
                                os.remove(line.replace(' ', '')[3:].replace('\n', ''))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            self.logger.warn('No such file/folder to delete, ' + line.replace(' ', '')[3:])
                    elif line.replace(' ', '')[:4] == 'edit':
                        try:
                            if os.path.isdir(line.replace(' ', '')[4:].replace('\n','')):
                                shutil.copytree(line.replace(' ', '')[4:].replace('\n', ''), '/boot/rpi-transfer')
                            else:
                                os.makedirs('/boot/rpi-transfer' + os.path.dirname(line.replace(' ', '')[4:].replace('\n', '')))
                                shutil.copy(line.replace(' ', '')[4:].replace('\n', ''), '/boot/rpi-transfer' + os.path.dirname(line.replace(' ', '')[4:].replace('\n', '')))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            self.logger.warn('No such file/folder to edit, ' + line.replace(' ', '')[4:])
            os.remove('/boot/rpi-transfer/EDIT-AND-DELETE.txt')
            edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(self.edit)
            edit_file.close()

    def copy_files(self):
        if self.noobs is True:
            for dirName, subdirList, fileList in os.walk('/mnt/rpi-transfer'):
                if not os.path.isdir(dirName.replace('/mnt/rpi-transfer', '')):
                    if dirName.replace('/mnt/rpi-transfer', '') == '':
                        pass
                    else:
                        os.mkdir(dirName.replace('/mnt/rpi-transfer', ''))
                for file_name in fileList:
                    if (dirName == '/mnt/rpi-transfer' and file_name == 'INSTRUCTIONS.txt') or (dirName == '/mnt/rpi-transfer' and file_name == 'EDIT-AND-DELETE.txt'):
                        pass
                    else:
                        if not file_name[:1] == '.':
                            if dirName.replace('/mnt/rpi-transfer', '') == '':
                                shutil.copy(os.path.join(dirName, file_name), '/')
                            else:
                                shutil.copy(os.path.join(dirName, file_name), dirName.replace('/mnt/rpi-transfer', ''))
            for directory in os.listdir('/mnt/rpi-transfer'):
                if (not directory == 'INSTRUCTIONS.txt') and (not directory == 'EDIT-AND-DELETE.txt'):
                    if os.path.isdir(os.path.join('/mnt/rpi-transfer', directory)):
                        shutil.rmtree(os.path.join('/mnt/rpi-transfer', directory))

        else:
            for dirName, subdirList, fileList in os.walk('/boot/rpi-transfer'):
                if not os.path.isdir(dirName.replace('/boot/rpi-transfer', '')):
                    if dirName.replace('/boot/rpi-transfer', '') == '':
                        pass
                    else:
                        os.mkdir(dirName.replace('/boot/rpi-transfer', ''))
                for file_name in fileList:
                    if (dirName == '/boot/rpi-transfer' and file_name == 'INSTRUCTIONS.txt') or (dirName == '/boot/rpi-transfer' and file_name == 'EDIT-AND-DELETE.txt'):
                        pass
                    else:
                        if not file_name[:1] == '.':
                            if dirName.replace('/boot/rpi-transfer', '') == '':
                                shutil.copy(os.path.join(dirName, file_name), '/')
                            else:
                                shutil.copy(os.path.join(dirName, file_name), dirName.replace('/boot/rpi-transfer', ''))
            for directory in os.listdir('/boot/rpi-transfer'):
                if (not directory == 'INSTRUCTIONS.txt') and (not directory == 'EDIT-AND-DELETE.txt'):
                    if os.path.isdir(os.path.join('/mnt/rpi-transfer', directory)):
                        shutil.rmtree(os.path.join('/boot/rpi-transfer', directory))

    def create_main(self):
        self.logger.info('Creating main folder')
        if self.noobs is True:
            os.makedirs('/mnt/rpi-transfer')
            instructions_file = open('/mnt/rpi-transfer/INSTRUCTIONS.txt', 'a+')
            instructions_file.write(self.instructions)
            instructions_file.close()

            edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(self.edit)
            edit_file.close()
        else:
            os.makedirs('/boot/rpi-transfer')
            instructions_file = open('/boot/rpi-transfer/INSTRUCTIONS.txt', 'a+')
            instructions_file.write(self.instructions)
            instructions_file.close()

            edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(self.edit)
            edit_file.close()

    def check_files(self):
        # Fstab
        self.logger.info('Checking for fstab')
        try:
            fstab_file = open('/etc/fstab', 'r')
            self.fstab = fstab_file.read()
            fstab_file.close()
        except (SystemExit, KeyboardInterrupt):
            raise
        except Exception, e:
            self.logger.error('Failed to find fstab, exiting...', exc_info=True)
            self.clean_up()
            sys.exit(-1)

    def check_main(self):
        if self.noobs is True:
            self.logger.info('Mounting /dev/mmcblk0p1')
            try:
                output = subprocess.check_output(['mount', '/dev/mmcblk0p1', '/mnt'])
            except subprocess.CalledProcessError as e:
                self.logger.error('Cannot mount NOOBS boot partition, exiting...')
                self.clean_up()
                sys.exit(-1)
            self.logger.info('Checking for main folder')

            if not os.path.isdir('/mnt/rpi-transfer'):
                self.logger.warn('Failed to find main folder, making new one')
                self.create_main()
        else:
            #Main folder
            self.logger.info('Checking for main folder')
            if not os.path.isdir('/boot/rpi-transfer'):
                self.logger.warn('Failed to find main folder, making new one')
                self.create_main()

    def start_check(self):
        self.check_files()

        self.logger.info('Checking if using NOOBS')

        if '/dev/mmcblk0p1  /boot' not in self.fstab:
            self.noobs = True

        self.check_main()

    def clean_up(self):
        if self.noobs is True:
            subprocess.call(['umount', '/mnt'])

instance = Transfer()
instance.main()
sys.exit(0)
