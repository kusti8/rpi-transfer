#!/usr/bin/env python

import os
import logging
import sys
import subprocess
import shutil


class Transfer:
    def __init__():
        self.noobs = False
        self.fstab = ''
        self.instructions = open('/etc/rpi-transfer/INSTRUCTIONS.txt', 'r').read()
        self.edit = open('/etc/rpi-transfer/EDIT-AND-DELETE.txt', 'r').read()
        self.logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)

        handler = logging.FileHandler('/var/log/rpi_transfer.log')
        handler.setLevel(logging.INFO)

        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)

        logger.addHandler(handler)

    def main():
        logger.info('Initiating startup check')
        start_check()
        logger.info('Checking and copying files')
        copy_files()
        logger.info('Checking and acting upon edit and delete files')
        edit_delete()
        logger.info("Looks like we're finished, let's exit, exiting...")

    def edit_delete():
        if noobs is True:
            try:
                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE', 'r+')
            except (SystemExit, KeyboardInterrupt):
                raise
            except Exception, e:
                logger.warn('No edit delete file, creating new...')

                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
                edit_file.write(edit)
                edit_file.close()

                edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE', 'r+')
            edit_file_contents = edit_file.readlines()
            for line in edit_file_contents:
                if not line.replace(' ', '')[0] == '#':
                    if line.replace(' ', '')[:3] == 'del':
                        try:
                            if os.path.isdir(line.replace(' ', '')[3:]):
                                shutil.rmtree(line.replace(' ', '')[3:])
                            else:
                                os.remove(line.replace(' ', '')[3:])
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            logger.warn('No such file/folder to delete, ' + line.replace(' ', '')[3:])
                    elif line.replace(' ', '')[:4] == 'edit':
                        try:
                            if os.path.isdir(line.replace(' ', '')[4:]):
                                shutil.copytree(line.replace(' ', '')[4:], '/mnt/rpi-transfer')
                            else:
                                shutil.copy(line.replace(' ', '')[4:], '/mnt/rpi-transfer'))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            logger.warn('No such file/folder to edit, ' + line.replace(' ', '')[4:])
            os.remove('/mnt/rpi-transfer/EDIT-AND-DELETE.txt')
            edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(edit)
            edit_file.close()
        else:
            try:
                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE', 'r+')
            except (SystemExit, KeyboardInterrupt):
                raise
            except Exception, e:
                logger.warn('No edit delete file, creating new...')

                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
                edit_file.write(edit)
                edit_file.close()

                edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE', 'r+')
            edit_file_contents = edit_file.readlines()
            for line in edit_file_contents:
                if not line.replace(' ', '')[0] == '#':
                    if line.replace(' ', '')[:3] == 'del':
                        try:
                            if os.path.isdir(line.replace(' ', '')[3:]):
                                shutil.rmtree(line.replace(' ', '')[3:])
                            else:
                                os.remove(line.replace(' ', '')[3:])
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            logger.warn('No such file/folder to delete, ' + line.replace(' ', '')[3:])
                    elif line.replace(' ', '')[:4] == 'edit':
                        try:
                            if os.path.isdir(line.replace(' ', '')[4:]):
                                shutil.copytree(line.replace(' ', '')[4:], '/boot/rpi-transfer')
                            else:
                                shutil.copy(line.replace(' ', '')[4:], '/boot/rpi-transfer'))
                        except (SystemExit, KeyboardInterrupt):
                            raise
                        except Exception, e:
                            logger.warn('No such file/folder to edit, ' + line.replace(' ', '')[4:])
            os.remove('/boot/rpi-transfer/EDIT-AND-DELETE.txt')
            edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(edit)
            edit_file.close()

    def copy_files():
        if noobs is True:
            for dirName, subdirList, fileList in os.walk('/mnt/rpi-transfer'):
                if not os.path.isdir(dirName.replace('/mnt/rpi-transfer', '')):
                    os.mkdir(dirName.replace('/mnt/rpi-transfer', ''))
                if dirName == '/mnt/rpi-transfer' and file_name == 'INSTRUCTIONS.txt' || dirName == '/mnt/rpi-transfer' and file_name == 'EDIT-AND-DELETE.txt':
                    pass
                else:
                    shutil.copy(os.path.join(dirName, file_name), dirName.replace('/mnt/rpi-transfer', ''))
        else:
            for dirName, subdirList, fileList in os.walk('/boot/rpi-transfer'):
                if not os.path.isdir(dirName.replace('/boot/rpi-transfer', '')):
                    os.mkdir(dirName.replace('/boot/rpi-transfer', ''))
                for file_name in fileList:
                    if dirName == '/boot/rpi-transfer' and file_name == 'INSTRUCTIONS.txt' || dirName == '/boot/rpi-transfer' and file_name == 'EDIT-AND-DELETE.txt':
                        pass
                    else:
                        shutil.copy(os.path.join(dirName, file_name), dirName.replace('/boot/rpi-transfer', ''))

    def create_main():
        logger.info('Creating main folder')
        if noobs is True:
            os.makedirs('/mnt/rpi-transfer')
            instructions_file = open('/mnt/rpi-transfer/INSTRUCTIONS.txt', 'a+')
            instructions_file.write(instructions)
            instructions_file.close()

            edit_file = open('/mnt/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(edit)
            edit_file.close()
        else:
            os.makedirs('/boot/rpi-transfer')
            instructions_file = open('/boot/rpi-transfer/INSTRUCTIONS.txt', 'a+')
            instructions_file.write(instructions)
            instructions_file.close()

            edit_file = open('/boot/rpi-transfer/EDIT-AND-DELETE.txt', 'a+')
            edit_file.write(edit)
            edit_file.close()

    def check_files():
        # Fstab
        logger.info('Checking for fstab')
        try:
            fstab_file = open('/etc/fstab', 'r')
            fstab = fstab_file.read()
            fstab_file.close()
        except (SystemExit, KeyboardInterrupt):
            raise
        except Exception, e:
            logger.error('Failed to find fstab, exiting...', exc_info=True)
            sys.exit(-1)

    def check_main():
        if noobs is True:
            logger.info('Mounting /dev/mmcblk0p1')
            try:
                output = subprocess.check_output(['mount', '/dev/mmcblk0p1', '/mnt'])
            except subprocess.CalledProcessError as e:
                logger.error('Cannot mount NOOBS boot partition, exiting...')
                sys.exit(-1)
            logger.info('Checking for main folder')

            if not os.path.isdir('/mnt/rpi-transfer'):
                logger.warn('Failed to find main folder, making new one')
                create_main()
        else:
            #Main folder
            logger.info('Checking for main folder')
            if not os.path.isdir('/boot/rpi-transfer'):
                logger.warn('Failed to find main folder, making new one')
                create_main()

    def start_check():
        check_files()

        logger.info('Checking if using NOOBS')

        if '/dev/mmcblk0p1  /boot' not in fstab:
            noobs = True

        check_main()

instance = Transfer()
instance.main()
sys.exit(0)
